import json
import automations.pyhue.patched_request as requests
import automations.pyhue.color
from automations.constants import ColorType
import environment as env


class Light:
	def __init__(self, bridge, data):
		self.bridge = bridge
		self.data = data
		self.url = env.url + '/light/' + self.get_ID()
	
		self.duration_payload = {'dyanmics' : {'duration' : 0}}


	def turn_on(self):
		payload = {'on' : {'on' : True}}
		return self.send_data(payload)

	def turn_off(self):
		payload = {'on' : {'on' : False}}
		return self.send_data(payload)

	def get_on_off_state(self):
		return self.data['on']['on']

	def set_brightness(self, brightness):
		payload = {'dimming' : {'brightness' : brightness}}
		return self.send_data(payload)

	def get_brightness():
		return self.data['dimming']['brightness']


	# id: (string â€“ pattern: ^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$)
	# Unique identifier representing a specific resource instance
	def get_ID(self):
		return self.data['id']

	# mirek: [153, 500], 500 is more red, 153 more blue
	def set_color(self, color):
		if(color.color_type == ColorType.TEMPERATURE):
			payload = {'color_temperature': {'mirek': color.mirek}}

		if(color.color_type == ColorType.XY):
			payload = {'color': {'xy' : {'x': color.x, 'y': color.y}}}

		if(color.color_type == ColorType.GAMUT_RGB_XY):
			payload = {'gamut' : 
				{	
					{'red' : {'x' : color.r_x, 'y': color.r_y}},
					{'green' : {'x': color.g_x, 'y': color.g_y}},
					{'blue' : {'x' : color.b_x, 'y' : color.b_y}}
				}
			}
				
		return self.send_data(payload)

	# Note: this state is appended to every request
	# maximum: 6000000ms
	def set_duration(self, duration):
		self.duration_payload = {'dynamics' : {'duration' : duration}}

	def flash_color(self, original_color, color, duration):
		self.set_duration(0)	
		self.set_color(color)
		self.set_duration(duration)
		self.set_color(original_color)
		self.set_duration(0)


	def get_data(self):
		response = requests.get(url=env.url + '/light')
		self.data = response.json()

	def send_data(self, payload):
        try:
		    payload.update(self.duration_payload)
        except:
            print("Error connecting to light")
        response = requests.put(url=self.url, json=payload)
		if(response.json()['errors']):
			print(response.json()['errors'])
		# self.retrieve_lights_data()
		return response

		

